#!@PYTHON@
#
#  plabun - Plot the abundances computed by Astrochem
#
#  Copyright (c) 2006-2014 Sebastien Maret
# 
#  This file is part of Astrochem.
#
#  Astrochem is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  Astrochem is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with Astrochem.  If not, see <http://www.gnu.org/licenses/>.

import sys
sys.path.append("@pythondir@")
import os.path
import getopt
import biggles
from numpy import *
from libastrochem import readabun, _totex_species

PACKAGE_VERSION = "@PACKAGE_VERSION@"
PACKAGE_BUGREPORT = "@PACKAGE_BUGREPORT@"

def usage():
    """
    Display usage

    """

    print("""Usage: plabun [options] file1 [file2...]

Plot abundances vs. time

Options:
   -h, --help               Display this help
   -V, --version            Display plabun version information
   -o, --output=file        Create a postscript file

   -s, --shell=index        Set the shell number (default 0)
   -x, --xrange=xmin,xmax   Set the x axis range
   -y, --yrange=ymin,ymax   Set the y axis range
   
See the plabun(1) man page for more information""")
    print("Report bugs to <%s>." % PACKAGE_BUGREPORT)

def version():
    """
    Display version number
    
    """

    print("This is plabun, version %s" % PACKAGE_VERSION)
    print("""Copyright (c) 2006-2014 Sebastien Maret

This is free software. You may redistribute copies of it under the terms
of the GNU General Public License. There is NO WARRANTY, to the extent
permitted by law.""")

def main():
    """
    Plot the abundances computed by Astrochem

    """

    # Parse options and arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hVo:s:x:y:",
                                   ["help", "version", "output=",
                                    "shell=", "xrange=", "yrange="])
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    output = None
    s =  0
    xrange = None
    yrange = None
    model = None

    for opt, arg in opts:
        if opt in ("-h", "--help") :
            usage()
            sys.exit()
        if opt in ("-V", "--version") :
            version()
            sys.exit()
        if opt in ("-o", "--output"):
            output = arg
        if opt in ("-s", "--shell"):
            try:
                s = int(arg)
            except:
                sys.stderr.write("plabun: error: invalid shell index.\n")
                sys.exit(1)
        if opt in ("-x", "--xrange"):
            try:
                xrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plabun: error: invalid x axis range.\n")
                sys.exit(1)
        if opt in ("-y", "--yrange"):
            try:
                yrange = [float(arg.split(",")[0]), float(arg.split(",")[1])]
            except:
                sys.stderr.write("plabun: error: invalid y axis range.\n")
                sys.exit(1)
        if opt in ("-m", "--model"):
            model = arg

    if len(args) == 0:
        usage()
        sys.exit(1)

    # Ignore commands, for backward compatibility
    if args[0] == "time":
        sys.stderr.write("plabun: warning: time command is deprecated, ignoring it.\n")
        args = args[1:]
        if len(args) == 0:
            usage()
            sys.exit(1)            
    elif args[0] == "av":
        sys.stderr.write("plabun: error: av command is deprecated.\n")
        sys.exit()

    filenames = args[0:]
    if len(filenames) > 6:
        sys.stderr.write("plabun: warning: at most 6 species can be plotted, ignoring others.\n")
        filenames = filenames[0:5]

    p = biggles.FramedPlot()
    p.title = "Abundances"
    p.xtitle = "Time (yr)"
    p.xlog = 1
    p.ytitle = "$n(x)/n_{H}$"
    p.ylog = 1
    if xrange:
        p.xrange = xrange
    if yrange:
        p.yrange = yrange
    curves = []

    # Stack for line colors
    linecolor_stack = ["red", "blue", "green", "yellow", "orange", "cyan"]
    
    # Plot the abundances in each file

    for filename in filenames:
        
        # Read the abundance file
        try:
            time, abund = readabun(filename)
        except IOError:
            sys.stderr.write("plabun: error: can't open %s.\n" % filename)
            sys.exit(1)
        except ValueError:
            sys.stderr.write("plabun: error: can't read %s.\n" % filename)
            sys.exit(1)

        # Get species name from the filename
        spec = os.path.splitext(os.path.basename(filename))[0]

        # Pick-up values that correspond to the given time index
        try:
            abund = abund[:, s]
        except IndexError:
            sys.stderr.write("plabun: error: shell index is out of bounds.\n")
            sys.exit(1)            

        # Drop zeros and negative values
        index = abund > 0
        time = time[index]
        abund = abund[index]

        # Check that time and abund contain at least two points
        if len(time) < 2:
            sys.stderr.write("plabun: warning: %s contains less than two non-zero abundances.\n" % filename)
            continue

        linecolor = linecolor_stack.pop(0)
        linecolor_stack.append(linecolor)
        c = biggles.Curve(time, abund, linecolor = linecolor, linewidth = 2)
        c.label = "$" + _totex_species(spec) + "$"
        curves.append(c)
        p.add(c)
    
    # Draw the plot key
    p.add(biggles.PlotKey(.1, .90, curves))

    # Check that we have at least one abundance to plot
    if len(curves) == 0:
        sys.stderr.write("plabun: error: nothing to plot.\n")
        sys.exit(1)
    
    if output:
        p.write_eps(output)
    else:
        p.show()

main()
